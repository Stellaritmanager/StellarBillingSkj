@model CustomerMasterModel

@{
    ViewData["Title"] = "CustomerMaster";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
    var imgs = ViewBag.ExistingImages as List<string>;
}


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        // Close popup when OK button is clicked
        popupOKButton.addEventListener("click", function () {
            closePopup();
        });

        // Close popup when clicking outside of the message box
        document.addEventListener("click", function (event) {
            if (!popup.contains(event.target) && !popupOKButton.contains(event.target)) {
                closePopup();
            }
        });
    }

    function closePopup() {
        var popup = document.getElementById("popupMessage");
        popup.style.display = "none"; // Hide the popup
    }

    function handleMessages(message) {
        showPopup(message);
    }

    $(document).ready(function () {
        var message = "@ViewBag.Message";
        if (message) {
            showPopup(message);
        }

        var errorMessage = "@ViewBag.ErrorMessage";
        if (errorMessage) {
            showPopup(errorMessage);
        }

        var delMessage = "@ViewBag.delMessage";
        if (delMessage) {
            showPopup(delMessage);
        }

        var delRetrieve = "@ViewBag.DelRetrieve";
        if (delRetrieve) {
            showPopup(delRetrieve);
        }
    });

</script>

<div id="popupMessage" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); color:black; padding: 30px; border: 1px solid #000000; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 10px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; background-color: rgba(255, 255, 255, 0.2); color: black; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>

<style>
    .popborder {
        border: 10px solid #fff;
    }
</style>

<form asp-controller="CustomerMaster" id="uploadForm" method="post" enctype="multipart/form-data" autocomplete="off">

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row" style="margin-top:10px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <h2 class="centered text-white" style="font-family:'Lucida Bright';text-align: center; margin: 0;">
                                Customer Master
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <br />
    <div class="row" style="height:8%"></div>

    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-sm-1 col-md-1 col-lg-1"></div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <input type="tel" maxlength="10" asp-for="MobileNumber" value="@Model.MobileNumber" id="MobileNumber" class="form-control" placeholder="Mobile Number" required pattern="\d{10}" title="Mobile Number should must contain 10 Digit" />
                                <label asp-for="MobileNumber" class="control-label">Mobile Number</label>
                                <span asp-validation-for="MobileNumber" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="CustomerName" class="form-control" placeholder="Customer Name" value="@Model.CustomerName" pattern="^[A-Za-z\s]+$" title="Customer Name should contain only letters and spaces" />
                                <label asp-for="CustomerName" class="control-label">Customer Name</label>
                                <span asp-validation-for="CustomerName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-1 col-md-1 col-lg-1">
                            <button type="submit" style="width:95px; height:50px;" value="Create" asp-action="GetCustomer" class="btn btn-primary ms-2">Get</button>

                        </div>
                    </div>

                    <br />
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row">
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="Fathername" class="form-control" placeholder="Father Name" value="@Model.Fathername" pattern="^[A-Za-z\s]+$" title="Customer Name should contain only letters and spaces" />
                                <label asp-for="Fathername" class="control-label">Father Name</label>
                                <span asp-validation-for="Fathername" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4 custom-date-picker">
                                <input asp-for="DateofBirth" type="date" value="@Model.DateofBirth" class="form-control" placeholder="DateofBirth" max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                                <label asp-for="DateofBirth" class="control-label">Date of Birth</label>
                                <span asp-validation-for="DateofBirth" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <select id="genderSelect" name="Gender" class="form-control">
                                    @if (string.IsNullOrEmpty(Model.Gender))
                                    {
                                        <option value="" selected>-- Select Gender --</option>
                                    }
                                    else
                                    {
                                        <option value="">-- Select Gender --</option>
                                    }

                                    @if (Model.Gender == "Male")
                                    {
                                        <option value="Male" selected>Male</option>
                                    }
                                    else
                                    {
                                        <option value="Male">Male</option>
                                    }

                                    @if (Model.Gender == "Female")
                                    {
                                        <option value="Female" selected>Female</option>
                                    }
                                    else
                                    {
                                        <option value="Female">Female</option>
                                    }

                                    @if (Model.Gender == "Other")
                                    {
                                        <option value="Other" selected>Other</option>
                                    }
                                    else
                                    {
                                        <option value="Other">Other</option>
                                    }
                                </select>

                                <label for="genderSelect">Gender</label>
                                <span asp-validation-for="Gender" class="text-danger"></span>
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">

                                <input asp-for="Address" class="form-control" placeholder="Address" value="@Model.Address" />
                                <label asp-for="Address" class="control-label">Address</label>

                                <span asp-validation-for="Address" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="Country" class="form-control" placeholder="Country" value="@Model.Country" pattern="^[A-Za-z\s]+$" title="Country Name should contain only letters and spaces" />
                                <label asp-for="Country" class="control-label"></label>
                                <span asp-validation-for="Country" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="State" class="form-control" placeholder="State" value="@Model.State" pattern="^[A-Za-z\s]+$" title="State Name should contain only letters and spaces" />
                                <label asp-for="State" class="control-label"></label>
                                <span asp-validation-for="State" class="text-danger"></span>
                            </div>
                        </div>

                    </div>

                    <div class="row">
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="City" class="form-control" placeholder="City" value="@Model.City" pattern="^[A-Za-z\s]+$" title="City Name should contain only letters and spaces" />
                                <label asp-for="City" class="control-label"></label>
                                <span asp-validation-for="City" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">

                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="Pincode" class="form-control" placeholder="Pincode" value="@Model.Pincode" pattern="^\d{6}$" title="Pincode Number should be in correct format" />
                                <label asp-for="Pincode" class="control-label"></label>
                                <span asp-validation-for="Pincode" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <input type="file" id="fileInput" name="Images" multiple />
                            <input type="hidden" name="KeptImages" id="KeptImages" />
                            <button type="button" id="viewImagesBtn" class="btn btn-info" style="margin-top:10px; display:none;">
                                View Images
                            </button>

                            @if (imgs != null && imgs.Any())
                            {
                                foreach (var img in imgs)
                                {
                                    <input type="hidden" name="existingImage" value="@img" />
                                }
                            }
                        </div>
                    </div>
                </div>

            </div>
            <div class="row mt-3">
                <div class="col-md-12 d-flex justify-content-center">


                    <button type="submit" id="save" value="save" asp-action="AddCustomer" class="btn btn-primary mx-2">Save</button>
                    <button type="submit" value="Create" asp-action="DeleteCustomer" class="btn btn-primaryred mx-2">Delete</button>
                    @*  <button type="submit"  value="Create" asp-action="GetDeleteRetrieve" class="btn btn-primaryellow mx-2">DeleteRetrieve</button> *@


                </div>
            </div>
        </div>

    </div>


</form>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content" style="background-color: #fff; border-radius: 10px;">
            <div class="modal-header">
                <h5 class="modal-title" id="imageModalLabel">Image Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="modalImage" src="" alt="Preview" style="max-width: 100%; max-height: 500px;" />
                <div class="mt-3">
                    <button class="btn btn-secondary" onclick="prevImage()">⟨</button>
                    <button class="btn btn-secondary" onclick="nextImage()">⟩</button>
                </div>
            </div>
        </div>
    </div>
</div>



<script>
    document.addEventListener('DOMContentLoaded', () => {

        const requiredFields = [
            { id: 'CustomerName', label: 'Customer Name' },
            { id: 'Address', label: 'Address' },
            { id: 'State', label: 'State' },
            { id: 'City', label: 'City' },
            { id: 'Pincode', label: 'Pincode' }
        ];

        const form = document.getElementById('uploadForm');

        form.addEventListener('submit', function (e) {
            // Get which button triggered the submit
            const clickedButton = e.submitter;

            // Only run validation if the clicked button is "Save"
            if (clickedButton && clickedButton.textContent.trim().toLowerCase() === 'save') {

                // Remove old validation borders
                requiredFields.forEach(f =>
                    document.getElementById(f.id).classList.remove('is-invalid')
                );

                // Find which fields are empty
                const missing = requiredFields.filter(f =>
                    !document.getElementById(f.id).value.trim()
                );

                if (missing.length > 0) {
                    e.preventDefault(); // Stop submit

                    // Add red border
                    missing.forEach(f =>
                        document.getElementById(f.id).classList.add('is-invalid')
                    );

                    // Show popup message
                    const msg = missing
                        .map(f => `"${f.label}" cannot be empty`)
                        .join('\n');

                    showPopup(msg);
                    document.getElementById(missing[0].id).focus();
                }
            }
        });
    });
</script>


@* ---------- Existing images preview (run once when the page loads) ---------- *@
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const fileInput = document.getElementById('fileInput');
        const uploadForm = document.getElementById('uploadForm');
        const keptField = document.getElementById('KeptImages');
        const viewImagesBtn = document.getElementById('viewImagesBtn');

        const filesList = [];        // [{ id, path?, file?, existing? }]
        const previewImages = [];    // All image URLs
        let currentIndex = 0;

        // Load existing images from DB
        document.querySelectorAll('input[name="existingImage"]').forEach(input => {
            const path = input.value;
            const id = crypto.randomUUID();
            const imgSrc = '/' + path.replace(/\\/g, '/');

            filesList.push({ id, path, existing: true });
            previewImages.push(imgSrc);
        });

        // Load new selected images
        fileInput.addEventListener('change', () => {
            for (const file of fileInput.files) {
                const id = `${Date.now()}_${file.name}`;
                const imgURL = URL.createObjectURL(file);

                filesList.push({ id, file });
                previewImages.push(imgURL);
            }

            fileInput.value = '';
            updateViewButtonVisibility();
        });

        // Show modal when button clicked
        viewImagesBtn.addEventListener('click', () => {
            if (previewImages.length > 0) {
                currentIndex = 0;
                document.getElementById('modalImage').src = previewImages[0];
                const modal = new bootstrap.Modal(document.getElementById('imageModal'));
                modal.show();
            }
        });

        // Form submit: send new files and kept image paths
        uploadForm.addEventListener('submit', () => {
            const keptPaths = filesList.filter(f => f.existing).map(f => f.path);
            keptField.value = JSON.stringify(keptPaths);

            const dt = new DataTransfer();
            filesList.forEach(f => { if (f.file) dt.items.add(f.file); });
            fileInput.files = dt.files;
        });

        // Modal navigation
        window.prevImage = function () {
            if (currentIndex > 0) {
                currentIndex--;
                document.getElementById('modalImage').src = previewImages[currentIndex];
            }
        };

        window.nextImage = function () {
            if (currentIndex < previewImages.length - 1) {
                currentIndex++;
                document.getElementById('modalImage').src = previewImages[currentIndex];
            }
        };

        function updateViewButtonVisibility() {
            viewImagesBtn.style.display = previewImages.length > 0 ? 'inline-block' : 'none';
        }

        updateViewButtonVisibility(); // On first load (if existing images)
    });
</script>
