@model PointsMasterModel
@using System.Data
@using NonFactors.Mvc.Grid

@{
    ViewData["Title"] = "PointsMaster";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
}

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        // Close popup when OK button is clicked
        popupOKButton.addEventListener("click", function () {
            closePopup();
        });

        // Close popup when clicking outside of the message box
        document.addEventListener("click", function (event) {
            if (!popup.contains(event.target) && !popupOKButton.contains(event.target)) {
                closePopup();
            }
        });
    }

    function closePopup() {
        var popup = document.getElementById("popupMessage");
        popup.style.display = "none"; // Hide the popup
    }

    function handleMessages(message) {
        showPopup(message);
    }

</script>

<div id="popupMessage" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); color:black; padding: 30px; border: 1px solid #000000; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 10px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; background-color: rgba(255, 255, 255, 0.2); color: black; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>

<style>
    .popborder {
        border: 10px solid #fff;
    }
</style>

<form asp-controller="StellarBilling" autocomplete="off">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>



    <div class="row">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12" style="padding: 0;">
            <div class="card" style="height:40px;">
                <div class="card-body dividerblack">
                    <div style="display: flex; align-items: center; height: 100%;">
                        <div class="container" style="text-align: left; width: 100%;">
                            <h2 class="centered text-white" style="font-family:'Lucida Bright'; margin: 0;">
                                Points Master
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <br />


      
    <div class="row" style="height:8%"></div>

    <div class="row" style="margin-top:60px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-md-12 col-lg-2"></div>
                        <div class="col-md-12 col-lg-4">

                            <div class="form-floating form-floating-outline mb-4">

                                        <input asp-for="NetPrice" class="form-control" placeholder="Net Price" value="@Model.NetPrice" pattern="^\d+$" title="Please enter a valid format. Only numbers are allowed"  required />
                                        <label asp-for="NetPrice" class="control-label">Net Price</label>
                                        <span asp-validation-for="NetPrice" class="text-danger"></span>
                                    </div>

                                    </div>

                            <div class="col-md-12 col-lg-4">

                                    <div class="form-floating form-floating-outline mb-4">

                                        <input asp-for="NetPoints" class="form-control" placeholder="Net Point" value="@Model.NetPoints" pattern="^\d+$" title="Please enter a valid format. Only numbers are allowed" />
                                        <label asp-for="NetPoints" class="control-label">Net Point</label>
                                        <span asp-validation-for="NetPoints" class="text-danger"></span>
                                    </div>
                                </div>
                           
                           

                            <div class="col-md-12 d-flex justify-content-center">

                            <button type="submit"  value="Create" class="btn btn-primary mx-2" asp-action="AddPoints">Save</button>

                                
                            </div>

                      
                    </div>
                    <br />

                </div>
            </div>
        </div>

        <div class="col-md-12 col-lg-2">
        </div>
    </div>
    <br />

    @{
        var dataTable = ViewData["Pointsdata"] as DataTable;
    }


    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <h3 class="centered text-white" style="font-family: 'Lucida Bright'; margin-bottom: 20px; text-align: center;">Points</h3>
                    <table class="table table-bordered" style="border: 1px solid black;">
                        <thead style="background-color: black; color: white;">
                            <tr>
                                <th>Net Price</th>
                                <th>Net Point</th>

                            </tr>
                        </thead>
                        <tbody>
                            @if (dataTable != null)
                            {
                                foreach (DataRow row in dataTable.Rows)
                                {
                                    <tr>
                                        <td>@row["NetPrice"]</td>
                                        <td>@row["NetPoints"]</td>

                                    </tr>
                                }
                            }
                        </tbody>
                    </table><div id="pagination-controls" style="text-align: center; margin-top: 10px;">
                        <button id="prev-btn" style="background-color: black; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Previous</button>
                        <div id="page-numbers" style="display: inline-block; vertical-align: middle;"></div>
                        <button id="next-btn" style="background-color: black; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Next</button>
                    </div>

                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            const rowsPerPage = 5; // Number of rows per page
                            const table = document.querySelector('.table tbody'); // Select the table body
                            const rows = Array.from(table.querySelectorAll('tr')); // Get all rows
                            const totalRows = rows.length; // Total number of rows
                            const totalPages = Math.ceil(totalRows / rowsPerPage); // Calculate total pages

                            let currentPage = 1; // Current page number

                            // Function to display rows for a given page
                            function showPage(page) {
                                rows.forEach((row, index) => {
                                    row.style.display = (Math.floor(index / rowsPerPage) + 1 === page) ? '' : 'none'; // Show or hide row
                                });

                                updatePageNumbers(); // Update the page number buttons
                                document.getElementById('prev-btn').disabled = (page === 1); // Disable 'prev' button if on first page
                                document.getElementById('next-btn').disabled = (page === totalPages); // Disable 'next' button if on last page
                            }

                            // Function to create and update page number buttons
                            function updatePageNumbers() {
                                const pageNumbersContainer = document.getElementById('page-numbers');
                                pageNumbersContainer.innerHTML = ''; // Clear previous buttons

                                // Create page number buttons
                                for (let i = 1; i <= totalPages; i++) {
                                    const pageButton = document.createElement('button');
                                    pageButton.textContent = i;
                                    pageButton.style.backgroundColor = (i === currentPage) ? 'black' : 'white'; // Highlight current page
                                    pageButton.style.color = (i === currentPage) ? 'white' : 'black';
                                    pageButton.style.border = 'none';
                                    pageButton.style.padding = '5px 10px';
                                    pageButton.style.cursor = 'pointer';
                                    pageButton.style.fontSize = '16px';
                                    pageButton.style.borderRadius = '5px';
                                    pageButton.style.margin = '0 3px';

                                    // Add click event listener to update current page
                                    pageButton.addEventListener('click', () => {
                                        currentPage = i;
                                        showPage(currentPage);
                                    });

                                    pageNumbersContainer.appendChild(pageButton); // Add button to container
                                }
                            }

                            // Event listener for 'prev' button
                            document.getElementById('prev-btn').addEventListener('click', () => {
                                if (currentPage > 1) {
                                    currentPage--;
                                    showPage(currentPage);
                                }
                            });

                            // Event listener for 'next' button
                            document.getElementById('next-btn').addEventListener('click', () => {
                                if (currentPage < totalPages) {
                                    currentPage++;
                                    showPage(currentPage);
                                }
                            });

                            showPage(currentPage); // Initial page display
                        });

                    </script>

                    </div>
                    </div>
                    </div>
                    </div>
                    

    @if (ViewBag.Message != null)
    {
        <script>
            handleMessages("@ViewBag.Message");
        </script>
    }

</form>
