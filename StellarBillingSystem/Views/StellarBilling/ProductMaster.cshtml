@model StellarBillingSystem.Models.ProductDropDownModel
@using System.Data
@using NonFactors.Mvc.Grid


@{
    ViewData["Title"] = "ProductMasterModel";
}

<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        // Close popup when OK button is clicked
        popupOKButton.addEventListener("click", function () {
            closePopup();
        });

        // Close popup when clicking outside of the message box
        document.addEventListener("click", function (event) {
            if (!popup.contains(event.target) && !popupOKButton.contains(event.target)) {
                closePopup();
            }
        });
    }

    function closePopup() {
        var popup = document.getElementById("popupMessage");
        popup.style.display = "none"; // Hide the popup
    }

    function handleMessages(message) {
        showPopup(message);
    }
</script>

<div id="popupMessage" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); color:black; padding: 30px; border: 1px solid #000000; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 10px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; background-color: rgba(255, 255, 255, 0.2); color: black; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>

<style>
    .popborder {
        border: 10px solid #fff;
    }
</style>


<form asp-controller="StellarBilling" autocomplete="off">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="row">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12" style="padding: 0;">
            <div class="card" style="height:40px;">
                <div class="card-body dividerblack">
                    <div style="display: flex; align-items: center; height: 100%;">
                        <div class="container" style="text-align: left; width: 100%;">
                            <h2 class="centered text-white" style="font-family:'Lucida Bright'; margin: 0;">
                                Product Master
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />
    <div class="row" style="height:8%"></div>

    <div class="row" style="margin-top:60px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-md-12 col-lg-0"></div>

                        <div class="col-md-12 col-lg-4">

                            <div class="form-floating form-floating-outline mb-4">
                                <input type="ProductID" class="form-control" placeholder="Product ID" name="ProductID" value="@Model.ObjPro.ProductID" />
                                <label asp-for="ObjPro.ProductID" class="control-label">Product ID</label>

                            </div>

                        </div>


                        <div class="col-md-12 col-lg-3">

                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="ObjPro.BarcodeId" class="form-control" placeholder="Barcode ID" value="@Model.ObjPro.BarcodeId" />
                                <label asp-for="ObjPro.BarcodeId" class="control-label">Barcode ID</label>

                            </div>
                        </div>

                        <div class="col-md-12 col-lg-3">

                            <div class="form-floating form-floating-outline mb-4">

                                <input type="GodownNoofitems" name="GodownNoofitems" value="@ViewBag.GodownNoofitems" class="form-control" placeholder="Godown Noofitems" readonly />
                                <label class="control-label">Godown Noofitems</label>

                            </div>
                        </div>


                        <button type="submit" style="width:95px; height:50px;" value="Get" asp-action="AddProduct" name="buttonType" class="btn btn-primary ms-2">Get</button>
                    

                    </div>

                    <div class="row">
                        <div class="col-md-12 col-lg-0">
                        </div>
                        <div class="col-md-12 col-lg-4">


                           <div class="form-floating form-floating-outline mb-4">
                                @Html.DropDownListFor(model => model.SelectedItemId, Model.Items, "Select an item", new { @class = "form-control" })
                                <label asp-for="SelectedItemId" class="control-label">Category Name</label>
                                <span asp-validation-for="SelectedItemId" class="text-danger"></span>
                            </div>

                        </div>

                        <div class="col-md-12 col-lg-5">
                            <div class="form-floating form-floating-outline mb-4">

                                <input asp-for="ObjPro.ProductName" value="@Model.ObjPro.ProductName" class="form-control" placeholder="Product Name" />
                                <label asp-for="ObjPro.ProductName" class="control-label">Product Name</label>

                                <span asp-validation-for="ObjPro.ProductName" class="text-danger"></span>
                            </div>


                        </div>



                        <div class="col-md-12 col-lg-3">


                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="ObjPro.Brandname" value="@Model.ObjPro.Brandname" class="form-control" placeholder="Brand Name" />
                                <label asp-for="ObjPro.Brandname" class="control-label">Brand Name</label>

                                <span asp-validation-for="ObjPro.Brandname" class="text-danger"></span>
                            </div>
                        </div>

                    </div>

                    <div class="row">
                        <div class="col-md-12 col-lg-0">
                        </div>
                        <div class="col-md-12 col-lg-4">

                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="ObjPro.ImeiNumber" value="@Model.ObjPro.ImeiNumber" class="form-control" placeholder="Imei Number" />
                                <label asp-for="ObjPro.ImeiNumber" class="control-label">Imei Number</label>

                                <span asp-validation-for="ObjPro.ImeiNumber" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="col-md-12 col-lg-3">
                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="ObjPro.SerialNumber" value="@Model.ObjPro.SerialNumber" class="form-control" placeholder="Serial Number" />
                                <label asp-for="ObjPro.SerialNumber" class="control-label">Serial Number</label>

                                <span asp-validation-for="ObjPro.SerialNumber" class="text-danger"></span>
                            </div>

                        </div>

                        <div class="col-md-12 col-lg-3">
                            <div class="form-floating form-floating-outline mb-4">
                                <input asp-for="ObjPro.Price" id="Price" value="@Model.ObjPro.Price" class="form-control" placeholder="Price" pattern="^\d{1,3}(,\d{3})*(\.\d{1,2})?$|^\d+(\.\d{1,2})?$"
                                       title="Please enter a valid price format, e.g., ₹3000, ₹3,000.00" />
                                <label asp-for="ObjPro.Price" class="control-label">Price</label>

                                <span asp-validation-for="ObjPro.Price" id="PriceError" class="text-danger"></span>
                            </div>
                        </div>



                        <div class="row mt-3">
                            <div class="col-md-12 d-flex justify-content-center">

                                <button type="submit" asp-action="AddProduct" value="Save" name="buttonType" class="btn btn-primary mx-2">Save</button>
                                <button type="submit" asp-action="AddProduct" value="Delete" name="buttonType" class="btn btn-primaryred mx-2">Delete</button>
                                <button type="submit" asp-action="AddProduct" value="DeleteRetrieve" name="buttonType" class="btn btn-primaryellow mx-2">Delete Retrieve</button>

                            </div>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>



    @*   <div class="form-floating form-floating-outline mb-4">
    @{
    var discount = ((IEnumerable<DiscountCategoryMasterModel>)ViewData["discountid"])
    .Select(m => new SelectListItem
    {
    Value = m.DiscountPrice.ToString(), // Assuming ScreenId is of type int
    Text = $"{m.CategoryID} - {m.DiscountPrice}"
    });
    }

    @Html.DropDownListFor(model => model.DiscountCategory, discount, "Select Discount Category", new { @class = "form-control" })
    <label asp-for="DiscountCategory" class="control-label">Discount Category</label>
    <span asp-validation-for="DiscountCategory" class="text-danger"></span>
    </div>
    <div class="form-floating form-floating-outline mb-4">
    <input asp-for="TotalAmount" id="TotalAmount" value="@Model.TotalAmount" class="form-control" placeholder="Total Amount" readonly />
    <label asp-for="TotalAmount" class="control-label">Total Amount</label>

    <span asp-validation-for="TotalAmount" class="text-danger"></span>
    </div> *@





    @if (ViewBag.Message != null)
    {
        <script>
            handleMessages("@ViewBag.Message");
        </script>
    }
    @if (ViewBag.NoProductMessage != null)
    {
        <script>
            handleMessages("@ViewBag.NoProductMessage");
        </script>
    }
    @if (ViewBag.PriceErrorMessage != null)
    {
        <script>
            handleMessages("@ViewBag.PriceErrorMessage");
        </script>
    }

    @if (ViewBag.ErrorMessage != null)
    {
        <script>
            handleMessages("@ViewBag.ErrorMessage");
        </script>
    }

    @if (ViewBag.CatErrorMessage != null)
    {
        <script>
            handleMessages("@ViewBag.CatErrorMessage");
        </script>
    }
    @if (ViewBag.ValidationMessage != null)
    {
        <script>
            handleMessages("@ViewBag.ValidationMessage");
        </script>
    }





    @{
        var dataTable = ViewData["ProductData"] as DataTable;
    }

    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <h3 class="centered text-white" style="font-family: 'Lucida Bright'; margin-bottom: 20px; text-align: center;">Products</h3>
                    <table class="table table-bordered" style="border: 1px solid black;">
                        <thead style="background-color: black; color: white;">
                            <tr>
                                <th>Product ID</th>
                                <th>Product Name</th>
                                <th>Barcode ID</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (dataTable != null)
                            {
                                foreach (DataRow row in dataTable.Rows)
                                {
                                    <tr>
                                        <td>@row["ProductID"]</td>
                                        <td>@row["ProductName"]</td>
                                        <td>@row["BarcodeId"]</td>
                                        <td>@row["Price"]</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>

                    </table><div id="pagination-controls" style="text-align: center; margin-top: 10px;">
                        <button id="prev-btn" style="background-color: black; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Previous</button>
                        <div id="page-numbers" style="display: inline-block; vertical-align: middle;"></div>
                        <button id="next-btn" style="background-color: black; color: white; border: none; padding: 0px 6px; cursor: pointer; font-size: 16px; border-radius: 5px; margin: 0 5px;">Next</button>
                    </div>

                    <script>
                        document.addEventListener('DOMContentLoaded', function () {
                            const rowsPerPage = 5; // Number of rows per page
                            const table = document.querySelector('.table tbody'); // Select the table body
                            const rows = Array.from(table.querySelectorAll('tr')); // Get all rows
                            const totalRows = rows.length; // Total number of rows
                            const totalPages = Math.ceil(totalRows / rowsPerPage); // Calculate total pages

                            let currentPage = 1; // Current page number

                            // Function to display rows for a given page
                            function showPage(page) {
                                rows.forEach((row, index) => {
                                    row.style.display = (Math.floor(index / rowsPerPage) + 1 === page) ? '' : 'none'; // Show or hide row
                                });

                                updatePageNumbers(); // Update the page number buttons
                                document.getElementById('prev-btn').disabled = (page === 1); // Disable 'prev' button if on first page
                                document.getElementById('next-btn').disabled = (page === totalPages); // Disable 'next' button if on last page
                            }

                            // Function to create and update page number buttons
                            function updatePageNumbers() {
                                const pageNumbersContainer = document.getElementById('page-numbers');
                                pageNumbersContainer.innerHTML = ''; // Clear previous buttons

                                // Create page number buttons
                                for (let i = 1; i <= totalPages; i++) {
                                    const pageButton = document.createElement('button');
                                    pageButton.textContent = i;
                                    pageButton.style.backgroundColor = (i === currentPage) ? 'black' : 'white'; // Highlight current page
                                    pageButton.style.color = (i === currentPage) ? 'white' : 'black';
                                    pageButton.style.border = 'none';
                                    pageButton.style.padding = '5px 10px';
                                    pageButton.style.cursor = 'pointer';
                                    pageButton.style.fontSize = '16px';
                                    pageButton.style.borderRadius = '5px';
                                    pageButton.style.margin = '0 3px';

                                    // Add click event listener to update current page
                                    pageButton.addEventListener('click', () => {
                                        currentPage = i;
                                        showPage(currentPage);
                                    });

                                    pageNumbersContainer.appendChild(pageButton); // Add button to container
                                }
                            }

                            // Event listener for 'prev' button
                            document.getElementById('prev-btn').addEventListener('click', () => {
                                if (currentPage > 1) {
                                    currentPage--;
                                    showPage(currentPage);
                                }
                            });

                            // Event listener for 'next' button
                            document.getElementById('next-btn').addEventListener('click', () => {
                                if (currentPage < totalPages) {
                                    currentPage++;
                                    showPage(currentPage);
                                }
                            });

                            showPage(currentPage); // Initial page display
                        });

                    </script>

                </div>
            </div>
        </div>
    </div>


</form>
<script>
    const moneyInput = document.getElementById('Price');
    const moneyError = document.getElementById('PriceError');

    // Function to format number in Indian format (e.g., 1,23,456.78)
    function formatToIndianCurrency(value) {
        // Split the integer and decimal parts
        let parts = value.split('.');
        let integerPart = parts[0];

        // Apply Indian numbering system formatting for the integer part
        let lastThree = integerPart.substring(integerPart.length - 3);
        let otherNumbers = integerPart.substring(0, integerPart.length - 3);

        if (otherNumbers !== '') {
            lastThree = ',' + lastThree;
        }

        let formattedInteger = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ',') + lastThree;

        // Return formatted number with decimal part (if exists)
        return parts.length > 1 ? formattedInteger + '.' + parts[1].substring(0, 2) : formattedInteger;
    }

    moneyInput.addEventListener('input', function (e) {
        // Remove any characters that are not digits or periods
        let value = this.value.replace(/[^0-9.]/g, '');

        // Format the value to Indian currency format
        this.value = formatToIndianCurrency(value);

        // Check if the format is valid (integer part only or with 1-2 decimal places)
        const indianMoneyFormat = /^\d{1,3}(,\d{2})*(\.\d{0,2})?$/;

        // Show or hide the error message
        if (!indianMoneyFormat.test(this.value)) {
            moneyError.style.display = 'inline';
        } else {
            moneyError.style.display = 'none';
        }
    });

    // Prevent form submission if the amount is invalid
    document.getElementById('moneyForm').addEventListener('submit', function (e) {
        const indianMoneyFormat = /^\d{1,3}(,\d{2})*(\.\d{0,2})?$/;

        if (!indianMoneyFormat.test(moneyInput.value)) {
            moneyError.style.display = 'inline'; // Show error message
            e.preventDefault(); // Prevent form submission
        }
    });
</script>
