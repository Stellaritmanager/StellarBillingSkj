@model PaymentTableViewModel

@{
    ViewData["Title"] = "PaymentBilling";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml"; // Adjust layout path as needed
}



<script>
    function showPopup(message) {
        var popup = document.getElementById("popupMessage");
        var popupText = document.getElementById("popupMessageText");
        var popupOKButton = document.getElementById("popupOKButton");

        popupText.textContent = message; // Set the message text
        popup.style.display = "block";

        // Close popup when OK button is clicked
        popupOKButton.addEventListener("click", function () {
            closePopup();
        });

        // Close popup when clicking outside of the message box
        document.addEventListener("click", function (event) {
            if (!popup.contains(event.target) && !popupOKButton.contains(event.target)) {
                closePopup();
            }
        });
    }

    function closePopup() {
        var popup = document.getElementById("popupMessage");
        popup.style.display = "none"; // Hide the popup
    }

    function handleMessages(message) {
        showPopup(message);
    }

</script>

<div id="popupMessage" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); color:black; padding: 30px; border: 1px solid #000000; border-radius: 10px; z-index: 1000; display: none; text-align: center;">
    <span id="popupMessageText" style="display: block; margin-bottom: 10px;"></span>
    <button id="popupOKButton" style="padding: 10px 20px; background-color: rgba(255, 255, 255, 0.2); color: black; border: none; border-radius: 5px; cursor: pointer;">OK</button>
</div>

<style>
    .popborder {
        border: 10px solid #fff;
    }
</style>



<form asp-controller="StellarBilling">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <input type="hidden" id="billId" name="BillID" value="@TempData["BillID"]" />
    <input type="hidden" id="billDate" name="BillDate" value="@TempData["BillDate"]" />
    <input type="hidden" id="billValue" name="BillValue" value="@TempData["BillValue"]" />
    <input type="hidden" id="branchID" name="BranchID" value="@TempData["BranchID"]" />

    <div class="row">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-md-12 col-lg-12" style="padding: 0;">
            <div class="card" style="height:40px;">
                <div class="card-body dividerblack">
                    <div style="display: flex; align-items: center; height: 100%;">
                        <div class="container" style="text-align: left; width: 100%;">
                            <h2 class="centered text-white" style="font-family:'Lucida Bright'; margin: 0;">
                                Payment Screen
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <br />



    <div class="row d-flex justify-content-center align-items-center" style="margin-top: 60px;">
       
        <div class="col-md-12 col-lg-4">
    <div class="card">
        <div class="card-body dividerblack">

            <div class="row gy-4" >
            <div class="col-md-12 d-flex justify-content-center">
                            
                            <button type="submit" class="btn btn-primary" asp-action="PaymentAction" name="buttonType" value="AddPayment">AddPayment</button>
                            

                                <label class="form-label" for="showToastPlacement">&nbsp;</label>
                                <button type="button" id="viewBillButton" class="btn btn-primary d-block">ViewBill</button>

                                </div> 
                        </div>
    
                   </div>
                   </div>
                   </div>
                   </div>
                   
    

    <!-- Toast Container -->
    <div id="toastContainer" class="toast-container position-absolute top-0 end-0 p-3" style="z-index: 2055; display: none;">
        <div id="customToast" class="bs-toast toast fade bg-dark" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <div class="me-auto fw-medium">Payment Details</div>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <p id="billDetailsLine1"></p>
                <p id="billDetailsLine2"></p>
            </div>
        </div>
    </div>
  

    <div class="row gy-4" style="margin-top:10px">
        <div class="col-md-12 col-lg-1">
        </div>
        <div class="col-md-12 col-lg-10">
            <div class="card">
                <div class="">

                    @if (Model.Viewpayment != null)
                    {
                        
                        <div class="row gy-4">
                            <div class="col-md-12 col-lg-0.5">
                            </div>
                            <div class="col-md-12 col-lg-12">
                                <div class="card">
                                    <div class="card-body ">
                                        <div class="table-responsive">

                                            <center>
                                                <h2 class="centered text-black" style="font-family:'Lucida Bright';">Payment Details</h2>
                                            </center>
                                            <br />

                     
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Select</th>
                                    <th>Payment Date</th>
                                    <th>Payment Description</th>
                                    <th>Payment Mode</th>
                                    <th>Transaction Number</th>
                                    <th>Payment Amount</th>
                                </tr>
                            </thead>
                            <tbody>

                                @for (int i = 0; i < Model.Viewpayment.Count; i++)
                                {
                                    var detail = Model.Viewpayment[i];
                                    <tr>
                                        <td>
                                                                <input type="radio" class="form-check-input" name="selectedSlotId" value="@detail.PaymentDiscription" />
                                            @*  <input type="hidden" name="billDetails[@i].DetailID" value="@detail.DetailID" />
                                    <input type="hidden" name="billDetails[@i].BillID" value="@ViewBag.BillID" /> *@
                                        </td>
                                        <td>
                                                                <input type="date" class="form-control custom-date-picker" name="Viewpayment[@i].PaymentDate" value="@Model.Viewpayment[i].PaymentDate" />
                                        </td>
                                        <td>
                                            <input type="text" class="form-control" name="Viewpayment[@i].PaymentDiscription" value="@Model.Viewpayment[i].PaymentDiscription" readonly />
                                        </td>
                                        <td>
                                            <input type="text" class="form-control" name="Viewpayment[@i].PaymentMode" value="@Model.Viewpayment[i].PaymentMode" />
                                        </td>
                                        <td>
                                            <input type="text" class="form-control" name="Viewpayment[@i].PaymentTransactionNumber" value="@Model.Viewpayment[i].PaymentTransactionNumber" />
                                        </td>
                                        <td>
                                            <input type="text" class="form-control" name="Viewpayment[@i].PaymentAmount" value="@Model.Viewpayment[i].PaymentAmount" />

                                       
                                        </td>

                                    </tr>
                                }
                            </tbody>

                        </table>


                                            <br />

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>



                    }
                </div>

            </div>
        </div>
    </div>


    <center>
        <div class="row mt-4">
            <div class="col-md-12">
                <button type="submit" class="btn btn-primary" asp-action="PaymentAction" name="buttonType" value="Save">SavePayment</button>
                <button type="submit" class="btn btn-primaryred" asp-action="PaymentAction" name="buttonType" value="DeletePaymentDetail">DeletePaymentDetail</button>
                <button type="submit" class="btn btn-primaryred" asp-action="PaymentAction" name="buttonType" value="DeletePayment">DeletePayment</button>
               </div>
        </div>
    </center>


    @if (ViewBag.Message != null)
    {
        <script>
            handleMessages("@ViewBag.Message");
        </script>
    }

    @if (ViewBag.ReedemMessage != null)
    {
        <script>
            handleMessages("@ViewBag.ReedemMessage");
        </script>
    }

    @if (ViewBag.DeleteMessage != null)
    {
        <script>
            handleMessages("@ViewBag.DeleteMessage");
        </script>
    }



</form>



<script>
    document.getElementById('viewBillButton').addEventListener('click', function () {
        // Get values from TempData or any other source
        var billId = '@TempData["BillID"]';
        var branchID = '@TempData["BranchID"]';
        var billDate = '@TempData["BillDate"]';

        // Make AJAX call to get updated data
        fetch(`/StellarBilling/PaymentActionget?billID=${billId}&branchID=${branchID}&billdate=${billDate}`)
            .then(response => response.json())
            .then(data => {
                // Show toast with updated values, passing null-friendly values
                showToast(data.billId, data.billDate, data.billValue, data.balance);
            })
            .catch(error => console.error('Error fetching bill details:', error));
    });

    function showToast(billId, billDate, billValue, balance) {
        // Handle 'null' values gracefully
        const billIdText = billId !== "null" ? billId : "N/A";
        const billDateText = billDate !== "null" ? billDate : "N/A";
        const billValueText = billValue !== "null" ? billValue : "N/A";
        const balanceText = balance !== "null" ? balance : "N/A";

        // Display the formatted text in the toast
        document.getElementById("billDetailsLine1").textContent = `Bill ID: ${billIdText} | Bill Date: ${billDateText}`;
        document.getElementById("billDetailsLine2").textContent = `Bill Value: ${billValueText} | Balance: ${balanceText}`;

        var toastContainer = document.getElementById('toastContainer');
        toastContainer.style.display = "block"; // Show the toast container
        var toast = new bootstrap.Toast(document.getElementById('customToast'));
        toast.show(); // Trigger the Bootstrap toast
    }


</script>




@* 
<script>
    // Function to display the toast with the bill details
    function showToast(billId, billDate, billValue, balance) {
        document.getElementById("billDetailsLine1").textContent = `Bill ID: ${billId} | Bill Date: ${billDate}`;
        document.getElementById("billDetailsLine2").textContent = `Bill Value: ${billValue} | Balance: ${balance}`;

        var toastContainer = document.getElementById('toastContainer');
        toastContainer.style.display = "block"; // Show the toast container
        var toast = new bootstrap.Toast(document.getElementById('customToast'));
        toast.show(); // Trigger the Bootstrap toast
    }

    document.getElementById('viewBillButton').addEventListener('click', function () {
        // Fetch the bill details from the server or variables (you can adapt it based on your data flow)
        var billId = '@TempData["BillID"]';
        var billDate = '@TempData["BillDate"]';
        var billValue = '@TempData["BillValue"]';
        var balance = '@TempData["Balance"]';

        // Trigger the toast with bill details when the view button is clicked
        showToast(billId, billDate, billValue, balance);
    });
</script> *@