@model StellarBillingSystem_skj.Models.RepledgeViewModel
@{
    ViewData["Title"] = "Repledge Master";
}

<h2>Repledge Master</h2>

<!-- Input BillID and RepledgeID -->
<div class="form-floating form-floating-outline mb-4">
    <input type="text" class="form-control" id="BillID" placeholder="Enter Bill ID" />
    <label for="BillID">BillID</label>
</div>

<div class="form-floating form-floating-outline mb-4">
    <input type="text" class="form-control" id="RepledgeID" placeholder="Enter Repledge ID" />
    <label for="RepledgeID">RepledgeID</label>
</div>

<button class="btn btn-secondary mb-2" onclick="getBillArticles()">Get Bill Articles</button>
<button class="btn btn-primary mb-2 ms-2" onclick="getRepledgeInfo()">Get Repledge Info</button>

<!-- Article List -->
<div>
    <h4>Available Articles:</h4>
    <div id="articleList" style="border:1px solid #ccc; padding:10px; min-height:100px;">
        <em>No articles loaded</em>
    </div>
</div>

<!-- Selected Articles -->
<div class="mt-4">
    <h4>Selected Articles:</h4>
    <div id="selected-articles-box" style="border:1px solid #ccc; padding:10px; min-height:100px;">
        <em>No articles selected</em>
    </div>
</div>

<hr />
<h3 class="mt-4">Buyer Info</h3>

<!-- Buyer Info -->
<div class="form-floating form-floating-outline mb-3">
    <input type="text" class="form-control" name="BuyerName" id="BuyerName" placeholder="Buyer Name" />
    <label for="BuyerName">Buyer Name</label>
</div>

<div class="form-floating form-floating-outline mb-3">
    <input type="text" class="form-control" name="Address" id="Address" placeholder="Address" />
    <label for="Address">Address</label>
</div>

<div class="form-floating form-floating-outline mb-3">
    <input type="text" class="form-control" name="PhoneNumber" id="PhoneNumber" placeholder="Phone Number" />
    <label for="PhoneNumber">Phone Number</label>
</div>

<div class="form-floating form-floating-outline mb-3">
    <input type="number" class="form-control" name="TotalAmount" id="TotalAmount" placeholder="Total Amount" />
    <label for="TotalAmount">Total Amount</label>
</div>

<div class="form-floating form-floating-outline mb-3">
    <input type="number" class="form-control" name="Interest" id="Interest" placeholder="Interest" />
    <label for="Interest">Interest</label>
</div>

<div class="form-floating form-floating-outline mb-3">
    <input type="number" class="form-control" name="Tenure" id="Tenure" placeholder="Tenure" />
    <label for="Tenure">Tenure</label>
</div>

<button class="btn btn-success" onclick="saveRepledge()">Save Repledge</button>

<button class="btn btn-success" onclick="deleteRepledge()">Delete Repledge</button>


<!-- Overlay -->
<div id="popupOverlay" style="display: none; position: fixed; top: 0; left: 0;
     width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.3);
     z-index: 999;" onclick="handleOutsideClick(event)">

    <!-- Popup Message Box -->
    <div id="popupMessage" style="position: fixed; top: 50%; left: 50%;
         transform: translate(-50%, -50%); background: white;
         padding: 30px; border: 1px solid black; border-radius: 10px;
         z-index: 1000;" onclick="event.stopPropagation()">

        <span id="popupMessageText"></span>
        <div class="mt-3 text-center">
            <button onclick="closePopup()" class="btn btn-outline-dark">OK</button>
        </div>
    </div>
</div>


<script>
    let selectedArticles = {}; // { billID: Set(articleID) }
    let articleNamesMap = {};  // { articleID: articleName }
    let lastLoadedRepledgeID = null; // track previously loaded RepledgeID
    let lastRepledgeUsedForArticles = null;
    let shouldReloadOnClose = false;

    function showPopup(message, reload = false) {
        shouldReloadOnClose = reload;
        document.getElementById("popupMessageText").textContent = message;
        document.getElementById("popupOverlay").style.display = "block";
    }

    function closePopup() {
        document.getElementById("popupOverlay").style.display = "none";
        if (shouldReloadOnClose) {
            location.reload();
        }
    }
    function handleOutsideClick(event) {
        closePopup(); // closes if user clicks on overlay (outside popup)
    }


    function getBillArticles() {
        const billID = document.getElementById('BillID').value.trim();
        const repledgeID = document.getElementById("RepledgeID").value.trim();

        if (!billID) {
            showPopup("Please enter a Bill ID.",false);
            return;
        }

        // ✅ Only initialize if billID not yet present
        if (!selectedArticles[billID]) {
            selectedArticles[billID] = new Set();
        }

        fetch('/RepledgeMaster/GetArticlesAjax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ BillID: billID })
        })
            .then(res => res.json())
            .then(data => {
                if (data.success === false) {
                    showPopup(data.message || "Bill data not found.",true);
                   // reload after 1.5 seconds
                    return;
                }

                const articles = data.articles || [];
                if (articles.length > 0) {
                    renderAvailableArticles(articles, billID,false); // ✅ shows new bill articles only
                } else {
                    document.getElementById("articleList").innerHTML = "<em>No articles loaded</em>";
                }

                renderSelectedArticles(); // ✅ keeps all previous selected articles untouched
            })
            .catch(error => {
                console.error("Error loading bill articles:", error);
                showPopup("Error loading bill articles.");
            });
    }



    function getRepledgeInfo() {
        const repledgeID = document.getElementById('RepledgeID').value.trim();

        if (!repledgeID) {
            showPopup("Please enter a Repledge ID.",false);
            return;
        }

        // ✅ Always clear article list when fetching repledge info
        document.getElementById("articleList").innerHTML = "<em>No articles loaded</em>";

        // 🟡 If repledge is new → full reset
        if (repledgeID !== lastLoadedRepledgeID) {
            selectedArticles = {};
            articleNamesMap = {};
            lastLoadedRepledgeID = repledgeID;

            document.getElementById("selected-articles-box").innerHTML = "<em>No articles selected</em>";
            document.getElementById("BuyerName").value = "";
            document.getElementById("Address").value = "";
            document.getElementById("PhoneNumber").value = "";
            document.getElementById("TotalAmount").value = "";
            document.getElementById("Interest").value = "";
            document.getElementById("Tenure").value = "";
        }

        fetch('/RepledgeMaster/GetArticlesAjax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ RepledgeID: repledgeID }) // ✅ Only RepledgeID
        })
            .then(res => res.json())
            .then(data => {
                if (data.success === false) {
                    showPopup(data.message || "Repledge data not found.",true);
                  
                    return;
                }

                // ✅ Load all selected articles from DB
                if (Array.isArray(data.selectedArticleIDs)) {
                    data.selectedArticleIDs.forEach(item => {
                        const bID = item.billID;
                        const aID = item.articleID;
                        const aName = item.articleName;

                        if (!selectedArticles[bID]) selectedArticles[bID] = new Set();
                        selectedArticles[bID].add(aID);
                        articleNamesMap[aID] = aName;
                    });
                }

                renderSelectedArticles();

                const buyer = data.buyerInfo;
                document.getElementById("BuyerName").value = buyer?.buyerName || "";
                document.getElementById("Address").value = buyer?.address || "";
                document.getElementById("PhoneNumber").value = buyer?.phoneNumber || "";
                document.getElementById("TotalAmount").value = buyer?.totalAmount || "";
                document.getElementById("Interest").value = buyer?.interest || "";
                document.getElementById("Tenure").value = buyer?.tenure || "";
            })
            .catch(error => {
                console.error("Error loading repledge info:", error);
                showPopup("Error loading repledge information.");
            });
    }




    function renderAvailableArticles(articles, billID, markSelected = true) {
        const box = document.getElementById("articleList");
        box.innerHTML = "";

        if (!articles || articles.length === 0) {
            box.innerHTML = "<em>No articles loaded</em>";
            return;
        }

        selectedArticles[billID] = selectedArticles[billID] || new Set();

        articles.forEach(article => {
            const aID = article.articleID;
            const aName = article.articleName;

            articleNamesMap[aID] = aName;

            const div = document.createElement("div");
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.value = aID;
            checkbox.dataset.billid = billID;
            checkbox.checked = markSelected && selectedArticles[billID].has(aID);
            checkbox.onchange = () => updateSelectedArticles(checkbox);

            div.appendChild(checkbox);
            div.append(" " + aName);
            box.appendChild(div);
        });
    }


    function renderSelectedArticles() {
        const box = document.getElementById("selected-articles-box");
        box.innerHTML = "";

        let hasSelection = false;

        for (const billID in selectedArticles) {
            if (!selectedArticles[billID] || selectedArticles[billID].size === 0) continue;

            selectedArticles[billID].forEach(articleID => {
                hasSelection = true;
                const articleName = articleNamesMap[articleID] || "(Unknown)";
                const div = document.createElement("div");
                div.textContent = ` ${billID} - ${articleName}`;
                box.appendChild(div);
            });
        }

        if (!hasSelection) {
            box.innerHTML = "<em>No articles selected</em>";
        }
    }

    function updateSelectedArticles(checkbox) {
        const billID = checkbox.dataset.billid;
        const articleID = checkbox.value;

        selectedArticles[billID] = selectedArticles[billID] || new Set();

        if (checkbox.checked) {
            selectedArticles[billID].add(articleID);
        } else {
            selectedArticles[billID].delete(articleID);
        }

        renderSelectedArticles();
    }

    function saveRepledge() {
        const billID = document.getElementById("BillID").value.trim();
        const repledgeID = document.getElementById("RepledgeID").value.trim();
        const buyerName = document.getElementById("BuyerName").value.trim();
        const address = document.getElementById("Address").value.trim();
        const phoneNumber = document.getElementById("PhoneNumber").value.trim();
        const totalAmount = document.getElementById("TotalAmount").value.trim();
        const interest = document.getElementById("Interest").value.trim();
        const tenure = document.getElementById("Tenure").value.trim();

        if (!repledgeID || !buyerName || !address || !phoneNumber || !totalAmount || !interest || !tenure) {
            showPopup("Please fill in all the fields.");
            return;
        }

        const articlesToSave = [];

        for (const billID in selectedArticles) {
            selectedArticles[billID].forEach(articleID => {
                articlesToSave.push({ billID, articleID });
            });
        }

        if (articlesToSave.length === 0) {
            showPopup("No articles selected to save.");
            return;
        }

        const payload = {
            billID,
            repledgeID,
            buyerName,
            address,
            phoneNumber,
            totalAmount,
            interest,
            tenure,
            articles: articlesToSave
        };

        fetch("/RepledgeMaster/SaveRepledgeAjax", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        })
            .then(res => res.ok ? res.json() : res.text().then(text => { throw new Error(text); }))
            .then(data => {
                showPopup(data.message || "Repledge saved successfully.",true);
              
            })
            .catch(err => {
                console.error("Save failed:", err);
                showPopup("Error saving repledge.");
            });
    }

    function deleteRepledge() {
        const repledgeID = document.getElementById("RepledgeID").value.trim();
        
        if (!repledgeID) {
            showPopup("Please enter a Repledge ID to delete.");
            return;
        }

        fetch("/RepledgeMaster/GetDeletAjax", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                RepledgeID: repledgeID
            })
        })
            .then(response => response.ok ? response.text() : Promise.reject("Server error"))
            .then(data => {
                showPopup("Repledge deleted successfully.",true);
                 
            })
            .catch(error => {
                console.error("Delete failed:", error);
                showPopup("Failed to delete repledge.");
            });
    }
</script>

