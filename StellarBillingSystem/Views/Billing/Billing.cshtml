@{
    ViewData["Title"] = "Billing";
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
    var imgs = ViewBag.ExistingImages as List<string>;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Create Bill</title>
    @*  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    *@
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    @*   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@
</head>
<body class="container py-4">


    <input type="hidden" id="BranchID" value="@ViewBag.BranchID" />

    <div class="row" style="margin-top:10px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <h2 class="centered text-white" style="font-family:'Lucida Bright';text-align: center; margin: 0;">
                                Create Bill Entry
                            </h2>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <br />
    <input type="hidden" id="BranchID" value="@ViewBag.BranchID" />
    <!-- Customer + Date -->
    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row gy-4">
                        <div class="col-sm-1 col-md-1 col-lg-1"></div>
                        <div class="col-sm-4 col-md-4 col-lg-4">

                            <label>Bill ID</label>
                            <input type="text" id="BillID" class="form-control" />

                        </div>
                        <div class="col-sm-5 col-md-5 col-lg-5">

                            <button class="btn-primaryellow" style="height:50px;margin-top:30px" onclick="getBill()">Get Bill</button>

                        </div>
                        <div class="col-sm-1 col-md-1 col-lg-1"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row">
                        <div class="col-sm-1 col-md-1 col-lg-1"> </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">

                            @{
                                var CustomerID = ((IEnumerable<CustomerMasterModel>)ViewData["customerid"])
                                .Select(m => new SelectListItem
            {
                Value = m.CustomerID.ToString(), // Assuming ProductID is of type int
                Text = $"{m.MobileNumber}-{m.CustomerName}"
            });
                            }

                            <label>Customer Number</label>
                            <input type="text" id="productDropdownInput" class="form-control" placeholder="Customer Number" onkeyup="filterDropdown(event, 'productDropdownInput', 'productDropdown')" onclick="showDropdown('productDropdown')">
                            <span class="text-danger"></span>

                            <ul id="productDropdown" class="list-group mt-2"
                                style="display: none; position: absolute; top: 100%; left: 0; width: 100%; max-height: 200px; overflow-y: auto; background-color: white; border: 1px solid #ddd; border-radius: .25rem; box-shadow: 0 0 .5rem rgba(0, 0, 0, .1); z-index: 1000; padding: 0; margin: 0; list-style-type: none;">
                                @foreach (var item in CustomerID)
                                {
                                    <li class="list-group-item" data-value="@item.Value" onclick="selectDropdownItem('productDropdownInput', 'productID', '@item.Text', '@item.Value')"
                                        style="padding: .5rem 1rem; cursor: pointer; background-color: white; border: none; list-style-type: none;">
                                        @item.Text
                                    </li>
                                }
                            </ul>


                            <input type="hidden" name="ProductID" id="productID" value="ProductID" />

                        </div>



                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label class="control-label">Bill Date</label>
                            <input type="date" id="BillDate" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                            <span class="text-danger"></span>
                        </div>

                        <div class="col-sm-2 col-md-2 col-lg-2" style="margin-top:30px">
                            <button style="background-color: #4fdd52; color: white; padding: 10px 10px; border: none; border-radius: 4px;" data-bs-toggle="modal" data-bs-target="#articleModal">Add Article</button>
                        </div>
                        <div class="col-sm-1 col-md-1 col-lg-1"> </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Article Details Table -->
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body dividerblack">
                        <!-- Make table scrollable on mobile -->
                        <div class="table-responsive">
                           
                            <table class="table table-striped" id="articleTable" style="background-color:#ffffff;">
                                <thead class="table-dark">
                                <tr>
                                        <th class="text-center">Article Name</th>
                                        <th class="text-center">Weight</th>
                                        <th class="text-center">Gold Type</th>
                                        <th class="text-center">Net Weight</th>
                                        <th class="text-center">Appraise/Gram</th>
                                        <th class="text-center">Reduced Weight</th>
                                        <th class="text-center">Net Market Price</th>
                                        <th class="text-center">Appraise Net Value</th>
                                        <th class="text-center">Quantity</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Your dynamic rows will go here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    
   
    <!-- Summary Fields -->
    <div class="row" style="margin-top:30px">
        <div class="col-md-12 col-lg-0"></div>
        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
            <div class="card">
                <div class="card-body dividerblack">
                    <div class="row">
                        <div class="col-sm-4 col-md-4 col-lg-4">

                            <label>Overall Weight</label>
                            <input type="text" id="OverallWeight" class="form-control" readonly />
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label>Total Value</label>
                            <input type="text" id="TotalValue" class="form-control" readonly />
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label>Loan Value</label>
                            <input type="text" id="LoanValue" class="form-control" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label>Initial Interest</label>
                            <input type="text" id="InitialInterest" class="form-control" />
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label>Total Repay Value</label>
                            <input type="text" id="TotalRepayValue" class="form-control" />
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label>Post Tenure Interest</label>
                            <input type="text" id="PostTenureInterest" class="form-control" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 col-md-4 col-lg-4">
                            <label>Tenure</label>
                            <input type="text" id="Tenure" class="form-control" />
                        </div>
                        <div class="col-sm-4 col-md-4 col-lg-4" style="margin-top:35px">
                            <input type="file" id="fileInput" name="Images" multiple />
                            <input type="hidden" name="KeptImages" id="KeptImages" />
                            <button type="button" id="viewImagesBtn" class="btn btn-info" style="margin-top:10px; display:none;">
                                View Images
                            </button>

                            @if (imgs != null && imgs.Any())
                            {
                                foreach (var img in imgs)
                                {
                                    <input type="hidden" name="existingImage" value="@img" />
                                }
                            }
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-sm-5 col-md-5 col-lg-5"></div>

                        <div class="col-sm-2 col-md-2 col-lg-2">
                            <button class="btn btn-success" onclick="saveBill()">Save Bill</button>


                        </div>

                        <div class="col-sm-3 col-md-3 col-lg-3">
                            <button style="background-color: darkcyan; color: white; padding: 10px 20px; border: none; border-radius: 4px;" onclick="printBill()">Print Bill</button>

                        </div>
                        <div class="col-sm-2 col-md-2 col-lg-2"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>












    <!-- Article Modal -->
    <div class="modal fade" id="articleModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header"><h5 class="modal-title">Add Article</h5></div>
                <div class="modal-body">
                    <input type="text" id="ArticleName" class="form-control mb-2" placeholder="Article Name" />
                    <input type="text" id="WeightOfArticle" class="form-control mb-2" placeholder="Weight" />
                    <!-- Gold Type Dropdown -->
                    <select id="GoldType" class="form-control mb-2" name="CategoryID" onchange="fillMarketRate(this)">
                        <option value="">-- Select Gold Type --</option>
                        @foreach (var item in ViewBag.GoldTypeList as List<CategoryMasterModel>)
                        {
                            <option value="@item.CategoryID" data-rate="@item.MarketRate">@item.CategoryName</option>
                        }
                    </select>

                    <input type="hidden" id="MarketRate" name="MarketRate" />


                    <input type="text" id="NetWeight" class="form-control mb-2" placeholder="Net Weight" />
                    <input type="text" id="AppraiseValuePerGram" class="form-control mb-2" placeholder="Appraise Value Per Gram" />
                    <input type="text" id="Quantity" class="form-control mb-2" placeholder="Quantity" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button class="btn btn-primary" onclick="addArticle()">Add</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Image Modal -->
    <div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content" style="background-color: #fff; border-radius: 10px;">
                <div class="modal-header">
                    <h5 class="modal-title" id="imageModalLabel">Image Preview</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="modalImage" src="" alt="Preview" style="max-width: 100%; max-height: 500px;" />
                    <div class="mt-3">
                        <button class="btn btn-secondary" onclick="prevImage()">⟨</button>
                        <button class="btn btn-secondary" onclick="nextImage()">⟩</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let articles = [];
        let billDetails = [];
        let filesList = [];        // [{ id, path?, file?, existing? }]
        let previewImages = [];    // All image URLs
        let currentIndex = 0;

        function fillMarketRate(select) {
            const selectedOption = select.options[select.selectedIndex];
            const rate = selectedOption.getAttribute('data-rate');
            document.getElementById('MarketRate').value = rate;
        }

        function calculateReducedWeight(gross, net) {
            return parseFloat((gross - net).toFixed(2));
        }

        function calculateAppraiseNetValue(net, rate) {
            return parseFloat((net * rate).toFixed(2));
        }

        function addArticle() {
            try {
                const name = $('#ArticleName').val();
                const weight = parseFloat($('#WeightOfArticle').val());
                const netWeight = parseFloat($('#NetWeight').val());
                const goldType = $('#GoldType').val();
                const appraisePerGram = parseFloat($('#AppraiseValuePerGram').val());
                const marketRate = parseFloat($('#MarketRate').val()) || 5800;
                const BranchID = $('#BranchID').val();
                const quantity = parseInt($('#Quantity').val());

                if (!name || isNaN(weight) || isNaN(netWeight) || !goldType || isNaN(appraisePerGram) || isNaN(quantity)) {
                    alert("Please fill all fields correctly.");
                    return;
                }

                const reducedWeight = calculateReducedWeight(weight, netWeight);
                const appraiseNetValue = calculateAppraiseNetValue(netWeight, appraisePerGram);
                const billID = $('#BillID').val();

                const article = {
                    ArticleName: name,
                    WeightOfArticle: weight,
                    GoldType: goldType,
                    Netweight: netWeight,
                    Appraisevaluepergram: appraisePerGram,
                    BranchID: BranchID,
                    LastUpdatedUser: 'admin',
                    LastUpdatedDate: new Date().toISOString(),
                    LastUpdatedmachine: 'machine'
                };

                const detail = {
                    BillID: billID,
                    Grossweight: weight,
                    Netweight: netWeight,
                    Reducedweight: reducedWeight,
                    Netmarketprice: marketRate,
                    Apprisevaluepergram: appraisePerGram,
                    Apprisenetvalue: appraiseNetValue,
                    Quantity: quantity,
                    BranchID: BranchID,
                    IsDelete: false
                };

                articles.push(article);
                billDetails.push(detail);

                updateTable();

                const modal = bootstrap.Modal.getInstance(document.getElementById('articleModal'));
                modal.hide();
                $('.modal-backdrop').remove();
                $('body').removeClass('modal-open').css('padding-right', '');

                $('#ArticleName, #WeightOfArticle, #GoldType, #MarketRate, #NetWeight, #AppraiseValuePerGram').val('');
            } catch (e) {
                alert("Error adding article: " + e.message);
            }
        }

        function updateTable() {
            const tbody = $('#articleTable tbody');
            tbody.empty();
            let overallWeight = 0;
            let totalValue = 0;

            billDetails.forEach((detail, index) => {
                const article = articles[index];
                overallWeight += detail.Netweight;
                totalValue += detail.Apprisenetvalue;

                tbody.append(`
                                                <tr>
                                                    <td>${article.ArticleName}</td>
                                                    <td>${detail.Grossweight}</td>
                                                    <td>${article.GoldType}</td>
                                                    <td>${detail.Netweight}</td>
                                                    <td>${detail.Apprisevaluepergram}</td>
                                                    <td>${detail.Reducedweight}</td>
                                                    <td>${detail.Netmarketprice}</td>
                                                    <td>${detail.Apprisenetvalue}</td>
                                                     <td>${detail.Quantity}</td>
                                                    <td><button class="btn btn-danger btn-sm" onclick="removeArticle(${index})">Remove</button></td>
                                                </tr>
                                            `);
            });

            $('#OverallWeight').val(overallWeight.toFixed(2));
            $('#TotalValue').val(totalValue.toFixed(2));
        }

        function removeArticle(index) {
            billDetails.splice(index, 1);
            articles.splice(index, 1);
            updateTable();
        }

        function saveBill() {
            const formData = new FormData();

            const billID = $('#BillID').val();
            const branchID = $('#BranchID').val();

            const imageModels = [];

            filesList.forEach((f, index) => {
                const fileId = `image_${index}`;
                const articleID = f.articleID || 0;

                imageModels.push({
                    BillID: billID,
                    ImageName: f.file ? f.file.name : f.path.split('/').pop(),
                    ImagePath: f.file ? `BillImage/${billID}/${f.file.name}` : f.path,
                    Lastupdateduser: 'admin',
                    Lastupdateddate: new Date().toISOString(),
                    Lastupdatedmachine: 'machine'
                });


                if (f.file) {
                    formData.append(fileId, f.file); // send the file
                }
            });

            const vm = {
                BillMaster: {
                    BillID: billID,
                    CustomerID: $('#productID').val(),
                    BillDate: $('#BillDate').val(),
                    BranchID: branchID,
                    OverallWeight: parseFloat($('#OverallWeight').val()) || 0,
                    TotalValue: parseFloat($('#TotalValue').val()) || 0,
                    LoanValue: parseFloat($('#LoanValue').val()) || 0,
                    InitialInterest: parseFloat($('#InitialInterest').val()) || 0,
                    TotalRepayValue: parseFloat($('#TotalRepayValue').val()) || 0,
                    PostTenureInterest: $('#PostTenureInterest').val(),
                    Tenure: $('#Tenure').val(),
                    NoOfItem: billDetails.length.toString(),
                    IsActive: true,
                    IsDelete: false,
                    Lastupdateduser: 'admin',
                    Lastupdateddate: new Date().toISOString(),
                    Lastupdatedmachine: 'machine'
                },
                BillDetails: billDetails,
                Articles: articles,
                BillImages: imageModels
            };

            formData.append("vm", JSON.stringify(vm));

            $.ajax({
                type: "POST",
                url: "/Billing/SaveBillWithFiles",
                data: formData,
                processData: false,
                contentType: false,
                success: function () {
                    alert("✅ Bill saved with images!");
                    window.location.reload();
                },
                error: function (xhr) {
                    alert("❌ Save failed: " + xhr.responseText);
                }
            });
        }

        function getBill() {
            const billId = $('#BillID').val();
            if (!billId) {
                alert("Please enter a Bill ID to fetch.");
                return;
            }

            $.ajax({
                type: 'GET',
                url: '/Billing/GetBill?billId=' + billId,
                success: function (res) {
                    if (!res || !res.BillMaster) {
                        alert("No bill found with that ID.");
                        return;
                    }

                    const bm = res.BillMaster;
                    const bd = res.BillDetails;
                    const articlesList = res.Articles;

                    // 🔄 Load existing images
                    filesList = [];
                    previewImages = [];

                    if (res.Images && res.Images.length > 0) {
                        res.Images.forEach((img, index) => {
                            const id = `existing_${index}`;

                            // ✅ Clean up any extra slashes
                            const cleanPath = img.ImagePath.replace(/^\/+/, '').replace(/\\/g, '/');
                            const finalPath = '/' + cleanPath; // Ensure only one leading slash

                            filesList.push({ id, path: finalPath, existing: true });
                            previewImages.push(finalPath);
                        });
                    }

                    updateViewButtonVisibility();

                    $('#productID').val(bm.CustomerID);
                    const selectedLi = $('#productDropdown li').filter(function () {
                        return $(this).data('value') == bm.CustomerID;
                    });

                    if (selectedLi.length > 0) {
                        $('#productDropdownInput').val(selectedLi.text().trim());
                    } else {
                        $('#productDropdownInput').val('');
                    }

                    $('#BillDate').val(bm.BillDate.split('T')[0]);
                    $('#OverallWeight').val(bm.OverallWeight);
                    $('#TotalValue').val(bm.TotalValue);
                    $('#LoanValue').val(bm.LoanValue);
                    $('#InitialInterest').val(bm.InitialInterest);
                    $('#TotalRepayValue').val(bm.TotalRepayValue);
                    $('#PostTenureInterest').val(bm.PostTenureInterest);
                    $('#Tenure').val(bm.Tenure);

                    articles = articlesList;
                    billDetails = bd;
                    updateTable();
                },
                error: function (xhr) {
                    alert("Error retrieving bill: " + xhr.responseText);
                }
            });
        }

        function printBill() {
            const billId = $('#BillID').val();
            const branchId = $('#BranchID').val();

            if (!billId || !branchId) {
                alert("Please enter Bill ID and Branch ID.");
                return;
            }

            // Create and submit a form to trigger the file download
            const form = $('<form>', {
                method: 'POST',
                action: '/Billing/printBill',
                style: 'display:none;'
            });

            form.append($('<input>', { name: 'billId', value: billId, type: 'hidden' }));
            form.append($('<input>', { name: 'branchId', value: branchId, type: 'hidden' }));

            $('body').append(form);
            form.submit();
            form.remove();
        }



        function prevImage() {
            if (currentIndex > 0) {
                currentIndex--;
                document.getElementById('modalImage').src = previewImages[currentIndex];
            }
        }

        function nextImage() {
            if (currentIndex < previewImages.length - 1) {
                currentIndex++;
                document.getElementById('modalImage').src = previewImages[currentIndex];
            }
        }

        function updateViewButtonVisibility() {
            const viewImagesBtn = document.getElementById('viewImagesBtn');
            viewImagesBtn.style.display = previewImages.length > 0 ? 'inline-block' : 'none';
        }

        $(document).ready(function () {
            $('#LoanValue, #InitialInterest').on('input', function () {
                const loan = parseFloat($('#LoanValue').val()) || 0;
                const interest = parseFloat($('#InitialInterest').val()) || 0;
                const total = loan + ((interest / 100) * loan);
                $('#TotalRepayValue').val(total.toFixed(2));
            });

            const fileInput = document.getElementById('fileInput');
            const keptField = document.getElementById('KeptImages');
            const viewImagesBtn = document.getElementById('viewImagesBtn');

            document.querySelectorAll('input[name="existingImage"]').forEach(input => {
                const path = input.value;
                const id = crypto.randomUUID();
                const imgSrc = '/' + path.replace(/\\/g, '/');

                filesList.push({ id, path, existing: true });
                previewImages.push(imgSrc);
            });

            fileInput.addEventListener('change', () => {
                for (const file of fileInput.files) {
                    const id = `${Date.now()}_${file.name}`;
                    const imgURL = URL.createObjectURL(file);
                    filesList.push({ id, file });
                    previewImages.push(imgURL);
                }

                fileInput.value = '';
                updateViewButtonVisibility();
            });

            viewImagesBtn.addEventListener('click', () => {
                if (previewImages.length > 0) {
                    currentIndex = 0;
                    document.getElementById('modalImage').src = previewImages[0];
                    const modal = new bootstrap.Modal(document.getElementById('imageModal'));
                    modal.show();
                }
            });

            updateViewButtonVisibility();
        });
    </script>

</body>
</html>





<script>
    let suppressInputEvent = false;

    function filterDropdown(event, inputId, dropdownId) {
        if (suppressInputEvent) return; // Prevent filtering if input event is suppressed

        const input = document.getElementById(inputId);
        const dropdown = document.getElementById(dropdownId);
        const filter = input.value.toLowerCase();
        const items = dropdown.querySelectorAll('li');

        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(filter) ? '' : 'none';
        });

        if (filter) {
            dropdown.style.display = 'block'; // Show dropdown when filtering
        }
    }

    function showDropdown(dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        dropdown.style.display = 'block';
    }

    function selectDropdownItem(inputId, hiddenId, text, value) {
        const input = document.getElementById(inputId);
        const hidden = document.getElementById(hiddenId);
        const dropdown = document.getElementById('productDropdown');

        // Trim whitespace from the selected text
        const trimmedText = text.trim();

        // Set the selected value in the input and hidden input
        input.value = trimmedText;
        hidden.value = value;

        // Hide the dropdown after selection
        dropdown.style.display = 'none';

        // Set the flag to suppress the input event momentarily
        suppressInputEvent = true;

        // Remove suppression after a short delay to allow normal input behavior again
        setTimeout(() => {
            suppressInputEvent = false;
        }, 200);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const input = document.getElementById('productDropdownInput');
        const dropdown = document.getElementById('productDropdown');

        let highlightedIndex = -1;

        function getVisibleItems() {
            return Array.from(dropdown.querySelectorAll('li')).filter(item => item.style.display !== 'none');
        }

        input.addEventListener('input', (event) => {
            filterDropdown(event, 'productDropdownInput', 'productDropdown');
            highlightedIndex = -1; // Reset highlight when input changes
        });

        input.addEventListener('keydown', (event) => {
            const visibleItems = getVisibleItems();

            switch (event.key) {
                case 'ArrowDown':
                    if (highlightedIndex < visibleItems.length - 1) {
                        highlightedIndex++;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'ArrowUp':
                    if (highlightedIndex > 0) {
                        highlightedIndex--;
                        updateHighlight(visibleItems);
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'Enter':
                    if (highlightedIndex >= 0) {
                        const item = visibleItems[highlightedIndex];
                        selectDropdownItem('productDropdownInput', 'productID', item.textContent, item.getAttribute('data-value'));
                        highlightedIndex = -1;
                        event.preventDefault(); // Prevent default behavior
                    }
                    break;
                case 'Escape':
                    dropdown.style.display = 'none'; // Close dropdown on escape
                    highlightedIndex = -1;
                    break;
            }
        });

        function updateHighlight(visibleItems) {
            visibleItems.forEach((item, index) => {
                item.style.backgroundColor = (index === highlightedIndex) ? '#000000' : 'white';
                item.style.color = (index === highlightedIndex) ? 'white' : 'black'; // Ensure text color contrasts with background
            });
            visibleItems[highlightedIndex]?.scrollIntoView({ block: 'nearest' });
        }

        // Click event to close dropdown when clicking outside
        document.addEventListener('click', (event) => {
            const target = event.target;
            if (!dropdown.contains(target) && target !== input) {
                dropdown.style.display = 'none';
            }
        });
    });
</script>
